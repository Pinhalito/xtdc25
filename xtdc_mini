#!/bin/bash

#######################
#    ^...^  `^...^¬¥   #
#   / o,o \ / O,O \   #
#   |):::(| |):::(|   #
# ====" "=====" "==== #
#         TdC         #
#      1998-2025      #
#######################
# Toca das Corujas
# C√≥digos Bin√°rios,
# Fun√ß√µes de Onda e
# Teoria do Orbital Molecular Inc.
# Unidade Bar√£o Geraldo CX
#
# 2025_07_12_11_53_28
#
# ===========================================================‚ö°
# CONFIGURA√á√ÉO DE CORES
# ===========================================================‚ö°
COLOR_HEADER="\e[104m"
COLOR_SUCCESS="\e[1;32m"
COLOR_WARNING="\e[0;35m"
COLOR_ERROR="\e[1;31m"
COLOR_INFO="\e[1;36m"
COLOR_RESET="\033[0m"

# =================================================‚ñº
# Fun√ß√£o: xtdc_update
# Descri√ß√£o: Auto-atualiza o script a partir do GitHub
# Uso: xtdc_update
# =================================================‚ñ≤
xtdc_update() {
    local github_url="https://raw.githubusercontent.com/MEUUSER/REPOSITORIO/main/xtdc.txt"
    local temp_file=$(mktemp /tmp/xtdc_update.XXXXXX)
    
    echo -e "${COLOR_INFO}üîç Verificando atualiza√ß√µes...${COLOR_RESET}"
    
    if ! wget -q "$github_url" -O "$temp_file"; then
        echo -e "${COLOR_ERROR}‚ùå Falha ao baixar a nova vers√£o${COLOR_RESET}"
        rm -f "$temp_file"
        return 1
    fi
    
    if ! cmp -s "$0" "$temp_file"; then
        echo -e "${COLOR_INFO}üîÑ Nova vers√£o encontrada! Atualizando...${COLOR_RESET}"
        if sudo cp "$temp_file" "$0" && sudo chmod +x "$0"; then
            echo -e "${COLOR_SUCCESS}‚úÖ Atualiza√ß√£o conclu√≠da com sucesso!${COLOR_RESET}"
            echo -e "${COLOR_INFO}‚ÑπÔ∏è Reinicie o script para aplicar as mudan√ßas.${COLOR_RESET}"
        else
            echo -e "${COLOR_ERROR}‚ùå Falha ao instalar a nova vers√£o (permiss√µes?)${COLOR_RESET}"
        fi
    else
        echo -e "${COLOR_SUCCESS}‚úÖ Voc√™ j√° tem a vers√£o mais recente!${COLOR_RESET}"
    fi
    
    rm -f "$temp_file"
}

# =================================================‚ñº
# Fun√ß√£o: xtdc_printa
# Descri√ß√£o: Captura uma regi√£o da tela, salva em um arquivo com data/hora e copia para o clipboard
# Uso: xtdc_printa
# =================================================‚ñ≤
xtdc_printa(){
    local agora=$(date +%Y_%m_%d_%H_%M_%S)
    local destino="~/Imagens/CapturasdeTela"
    mkdir -p "$destino"
    local temp_file=$(mktemp "/tmp/xfce_screenshot_XXXXXX.png")

    if xfce4-screenshooter -rc -s "$temp_file" 2>/dev/null; then
        if [[ -s "$temp_file" ]]; then
            local novo_arquivo="${destino}/captura_de_tela_${agora}.png"
            mv "$temp_file" "$novo_arquivo" && {
                zenity --notification --timeout=1 --text="‚úÖ Captura salva em:\n${novo_arquivo}"
            }
        else
            rm -f "$temp_file"
            zenity --error --title="Captura Cancelada" --text="‚ùå Nenhuma regi√£o foi selecionada." --timeout=1
        fi
    else
        rm -f "$temp_file"
        zenity --error --title="Erro na Captura" --text="‚ùå A captura foi cancelada ou ocorreu um erro." --timeout=1
    fi
}

# =================================================‚ñº
# Fun√ß√£o: xtdc_help
# Descri√ß√£o: Exibe ajuda do script
# Uso: xtdc_help
# =================================================‚ñ≤
xtdc_help() {
    echo -e "${COLOR_HEADER}üìå XTDC - UTILIT√ÅRIO LINUX${COLOR_RESET}"
    echo -e "${COLOR_INFO}Comandos dispon√≠veis:${COLOR_RESET}"
    echo -e "  ${COLOR_SUCCESS}printa${COLOR_RESET}   - Captura regi√£o da tela"
    echo -e "  ${COLOR_SUCCESS}update${COLOR_RESET}  - Auto-atualiza o script"
    echo -e "  ${COLOR_SUCCESS}help${COLOR_RESET}    - Mostra esta ajuda"
}

# Chama a fun√ß√£o principal se o script for executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "$1" in
        printa) xtdc_printa ;;
        update) xtdc_update ;;
        help) xtdc_help ;;
        *) xtdc_help ;;
    esac
fi

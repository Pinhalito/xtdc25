#!/bin/bash

#######################
#    ^...^  `^...^¬¥   #
#   / o,o \ / O,O \   #
#   |):::(| |):::(|   #
# ====" "=====" "==== #
#         TdC         #
#      1998-2025      #
#######################
#
# Toca das Corujas
# C√≥digos Bin√°rios,
# Fun√ß√µes de Onda e
# Teoria do Orbital Molecular Inc.
# Unidade Bar√£o Geraldo CX
#
# 2025_07_12_17_24_24
#
# =================================================‚ö°
# CONFIGURA√á√ÉO DE CORES
# =================================================‚ö°
COLOR_HEADER="\e[104m"
COLOR_SUCCESS="\e[1;32m"
COLOR_WARNING="\e[0;35m"
COLOR_ERROR="\e[1;31m"
COLOR_INFO="\e[1;36m"
COLOR_RESET="\033[0m"

# =================================================‚ö°
# Fun√ß√£o: xtdc_printa
# Descri√ß√£o: Captura uma regi√£o da tela, salva em um arquivo com data/hora e copia para o clipboard
# Uso: xtdc_printa
# =================================================‚ö°
xtdc_printa(){
    local agora=$(date +%Y_%m_%d_%H_%M_%S)
    local destino="/mnt/UM/IMAGENS/PRINTS"
    mkdir -p "$destino"
    local temp_file=$(mktemp "/tmp/xfce_screenshot_XXXXXX.png")

    if xfce4-screenshooter -rc -s "$temp_file" 2>/dev/null; then
        if [[ -s "$temp_file" ]]; then
            local novo_arquivo="${destino}/captura_de_tela_${agora}.png"
            mv "$temp_file" "$novo_arquivo" && {
                zenity --notification --timeout=1 --text="‚úÖ Captura salva em:\n${novo_arquivo}"
            }
        fi
    else
        rm -f "$temp_file"
        zenity --error --title="Captura Cancelada" --text="‚ùå Nenhuma regi√£o foi selecionada." --timeout=1
    fi
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_update
# Descri√ß√£o: Auto-atualiza o script a partir do GitHub
# Uso: xtdc_update
# =================================================‚ñ≤
xtdc_update() {
    local github_url="https://raw.githubusercontent.com/Pinhalito/xtdc25/main/xtdc"
    local temp_file=$(mktemp /tmp/xtdc_update.XXXXXX)
    local installed_script="/bin/xtdc"  # Caminho absoluto fixo

    # Verifica se os comandos necess√°rios existem
    for cmd in wget sudo cp chmod; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            echo -e "${COLOR_ERROR}‚ùå Comando obrigat√≥rio n√£o encontrado: $cmd${COLOR_RESET}"
            return 1
        fi
    done

    echo -e "${COLOR_INFO}üîç Baixando atualiza√ß√£o do GitHub...${COLOR_RESET}"

    # Baixa a vers√£o mais recente (ignorando compara√ß√£o)
    if ! wget -q "$github_url" -O "$temp_file"; then
        echo -e "${COLOR_ERROR}‚ùå Falha ao baixar a nova vers√£o${COLOR_RESET}"
        rm -f "$temp_file"
        return 1
    fi

    # Substitui o arquivo local SEMPRE (sem checar diferen√ßas)
    if sudo cp "$temp_file" "$installed_script" && sudo chmod +x "$installed_script"; then
        echo -e "${COLOR_SUCCESS}‚úÖ Script atualizado para a vers√£o mais recente!${COLOR_RESET}"
    else
        echo -e "${COLOR_ERROR}‚ùå Falha ao instalar a nova vers√£o (verifique permiss√µes)${COLOR_RESET}"
        rm -f "$temp_file"
        return 1
    fi

    rm -f "$temp_file"
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_extrair_legenda
# Descri√ß√£o: Extrai a legenda de um arquivo mkv
# Uso: xtdc_extrair_legenda arquivo.mkv
# =================================================‚ñ≤
xtdc_extrair_legenda() {
    arquivo="$1"
    [ -f "$arquivo" ] || { echo "Arquivo n√£o encontrado: $arquivo"; return 1; }
    base="${arquivo%.mkv}"
    echo "Extraindo legenda de: $arquivo"
    mkvextract tracks "$arquivo" 2:"$base.srt"
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_embaralha
# Descri√ß√£o: Embaralha uma string
# Uso: xtdc_embaralha STRING
# =================================================‚ñ≤
# Fun√ß√£o para embaralhar
xtdc_embaralha() {
    echo -n "Digite a senha para embaralhar: "
    read -s senha
    echo
    
    # Gera o texto embaralhado
    texto_embaralhado=$(openssl enc -aes-256-cbc -a -A -salt -pass pass:"$senha" <<< "$1" 2>/dev/null)
    
    # Copia para o ClipIt corretamente
    echo -n "$texto_embaralhado" | xclip -selection clipboard
    
    # Verifica se foi copiado
    if [ "$(xclip -o -selection clipboard)" = "$texto_embaralhado" ]; then
        echo "‚úÖ String embaralhada copiada para o clipboard!"
    else
        echo "‚ùå Falha ao copiar para o clipboard"
        echo "Texto embaralhado: $texto_embaralhado"
    fi
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_desembaralha
# Descri√ß√£o: Desembaralha uma string
# Uso: xtdc_desembaralha STRING
# =================================================‚ñ≤
# Fun√ß√£o para desembaralhar
xtdc_desembaralha() {
    echo -n "Digite a senha para desembaralhar: "
    read -s senha
    echo
    
    openssl enc -aes-256-cbc -a -d -A -salt -pass pass:"$senha" <<< "$1" 2>/dev/null || echo "‚ùå Senha incorreta!"
}


xtdc_senha_de_sempre() {
	desembaralha U2FsdGVkX19QKHP8C3kiSjD19OJAZHKaE/D0PPzyg3uHU2R1dv0ad27Kvtp2T5OYSPWq5+b7R5qNQYaaR2/I0Yip+NT4hTbO/FoMOEPRV4uEo1B6aeQxERclHK8mBg9o4XyqTXPRbj0uyy0e94vs1A==
    desembaralha U2FsdGVkX1/VJICs1wTvNZAIiVnTDZL5IDEPb4r7qVn4ZKczhJGBOUW9xL2F6UpfUe9ojkUyHNQr50DCMEzxBs3Os9gNd6luCgLyJgfCNmpUiLOOW/Zy+GHaN4rAGdt8G3wO/+deYxEMNiCeeGUknQ==
    
}


# Chama a fun√ß√£o principal se o script for executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    "$@"
fi

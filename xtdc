#!/bin/bash

#######################
#    ^...^  `^...^¬¥   #
#   / o,o \ / O,O \   #
#   |):::(| |):::(|   #
# ====" "=====" "==== #
#         TdC         #
#      1998-2025      #
#######################
#
# Toca das Corujas
# C√≥digos Bin√°rios,
# Fun√ß√µes de Onda e
# Teoria do Orbital Molecular Inc.
# Unidade Bar√£o Geraldo CX
#
# 2025_07_12_17_37_09
#
# =================================================‚ö°
# CONFIGURA√á√ÉO DE CORES
# =================================================‚ö°
COLOR_HEADER="\e[104m"
COLOR_SUCCESS="\e[1;32m"
COLOR_WARNING="\e[0;35m"
COLOR_ERROR="\e[1;31m"
COLOR_INFO="\e[1;36m"
COLOR_RESET="\033[0m"

# =================================================‚ö°
# Fun√ß√£o: xtdc_printa
# Descri√ß√£o: Captura uma regi√£o da tela, salva em um arquivo com data/hora e copia para o clipboard
# Uso: xtdc_printa
# =================================================‚ö°
xtdc_printa(){
    local agora=$(date +%Y_%m_%d_%H_%M_%S)
    local destino="/mnt/UM/IMAGENS/PRINTS"
    mkdir -p "$destino"
    local temp_file=$(mktemp "/tmp/xfce_screenshot_XXXXXX.png")

    if xfce4-screenshooter -rc -s "$temp_file" 2>/dev/null; then
        if [[ -s "$temp_file" ]]; then
            local novo_arquivo="${destino}/captura_de_tela_${agora}.png"
            mv "$temp_file" "$novo_arquivo" && {
                zenity --notification --timeout=1 --text="‚úÖ Captura salva em:\n${novo_arquivo}"
            }
        fi
    else
        rm -f "$temp_file"
        zenity --error --title="Captura Cancelada" --text="‚ùå Nenhuma regi√£o foi selecionada." --timeout=1
    fi
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_update
# Descri√ß√£o: Auto-atualiza o script a partir do GitHub
# Uso: xtdc_update
# =================================================‚ñ≤
xtdc_update() {
    local github_url="https://raw.githubusercontent.com/Pinhalito/xtdc25/main/xtdc"
    local temp_file=$(mktemp /tmp/xtdc_update.XXXXXX)
    local installed_script="/bin/xtdc"  # Caminho absoluto fixo

    # Verifica se os comandos necess√°rios existem
    for cmd in wget sudo cp chmod; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            echo -e "${COLOR_ERROR}‚ùå Comando obrigat√≥rio n√£o encontrado: $cmd${COLOR_RESET}"
            return 1
        fi
    done

    echo -e "${COLOR_INFO}üîç Baixando atualiza√ß√£o do GitHub...${COLOR_RESET}"

    # Baixa a vers√£o mais recente (ignorando compara√ß√£o)
    if ! wget -q "$github_url" -O "$temp_file"; then
        echo -e "${COLOR_ERROR}‚ùå Falha ao baixar a nova vers√£o${COLOR_RESET}"
        rm -f "$temp_file"
        return 1
    fi

    # Substitui o arquivo local SEMPRE (sem checar diferen√ßas)
    if sudo cp "$temp_file" "$installed_script" && sudo chmod +x "$installed_script"; then
        echo -e "${COLOR_SUCCESS}‚úÖ Script atualizado para a vers√£o mais recente!${COLOR_RESET}"
    else
        echo -e "${COLOR_ERROR}‚ùå Falha ao instalar a nova vers√£o (verifique permiss√µes)${COLOR_RESET}"
        rm -f "$temp_file"
        return 1
    fi

    rm -f "$temp_file"
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_extrair_legenda
# Descri√ß√£o: Extrai a legenda de um arquivo mkv
# Uso: xtdc_extrair_legenda arquivo.mkv
# =================================================‚ñ≤
xtdc_extrair_legenda() {
    arquivo="$1"
    [ -f "$arquivo" ] || { echo "Arquivo n√£o encontrado: $arquivo"; return 1; }
    base="${arquivo%.mkv}"
    echo "Extraindo legenda de: $arquivo"
    mkvextract tracks "$arquivo" 2:"$base.srt"
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_embaralha
# Descri√ß√£o: Embaralha uma string
# Uso: xtdc_embaralha STRING
# =================================================‚ñ≤
# Fun√ß√£o para embaralhar
xtdc_embaralha() {
    echo -n "Digite a senha para embaralhar: "
    read -s senha
    echo
    
    # Gera o texto embaralhado
    texto_embaralhado=$(openssl enc -aes-256-cbc -a -A -salt -pass pass:"$senha" <<< "$1" 2>/dev/null)
    
    # Copia para o ClipIt corretamente
    echo -n "$texto_embaralhado" | xclip -selection clipboard
    
    # Verifica se foi copiado
    if [ "$(xclip -o -selection clipboard)" = "$texto_embaralhado" ]; then
        echo "‚úÖ String embaralhada copiada para o clipboard!"
    else
        echo "‚ùå Falha ao copiar para o clipboard"
        echo "Texto embaralhado: $texto_embaralhado"
    fi
}


# =================================================‚ñº
# Fun√ß√£o: xtdc_desembaralha
# Descri√ß√£o: Desembaralha uma string
# Uso: xtdc_desembaralha STRING
# =================================================‚ñ≤
# Fun√ß√£o para desembaralhar
xtdc_desembaralha() {
    echo -n "Digite a senha para desembaralhar: "
    read -s senha
    echo
    
    openssl enc -aes-256-cbc -a -d -A -salt -pass pass:"$senha" <<< "$1" 2>/dev/null || echo "‚ùå Senha incorreta!"
}


xtdc_senha_de_sempre() {
	desembaralha U2FsdGVkX19QKHP8C3kiSjD19OJAZHKaE/D0PPzyg3uHU2R1dv0ad27Kvtp2T5OYSPWq5+b7R5qNQYaaR2/I0Yip+NT4hTbO/FoMOEPRV4uEo1B6aeQxERclHK8mBg9o4XyqTXPRbj0uyy0e94vs1A==
    desembaralha U2FsdGVkX1/VJICs1wTvNZAIiVnTDZL5IDEPb4r7qVn4ZKczhJGBOUW9xL2F6UpfUe9ojkUyHNQr50DCMEzxBs3Os9gNd6luCgLyJgfCNmpUiLOOW/Zy+GHaN4rAGdt8G3wO/+deYxEMNiCeeGUknQ==
    
}


xtdc_bkp() {
# Configura√ß√£o simplificada - adicione seus diret√≥rios entre os par√™nteses
DIRETORIOS=(
    "/mnt/DOIS/NOVOXTDC/CUBIC2/custom-root/etc/skel"
    "/mnt/DOIS/NOVOXTDC/CUBIC2/custom-root/usr/share/themes/xtdc_theme"
    "/mnt/DOIS/NOVOXTDC/CUBIC2/custom-root/usr/share/icons/xtdc_icons"
    "/mnt/DOIS/NOVOXTDC/CUBIC2/custom-root/usr/share/fonts/truetype/xtdc_ttf"
)

# Nome do arquivo de backup com timestamp
BACKUP_FILE="bkp_$(date +'%Y_%m_%d_%H_%M_%S').tar.gz"

# Mostra os diret√≥rios que ser√£o inclu√≠dos no backup
echo "=============================================="
echo "DIRET√ìRIOS QUE SER√ÉO INCLU√çDOS NO BACKUP:"
echo "----------------------------------------------"
for dir in "${DIRETORIOS[@]}"; do
    echo "- $dir"
done
echo "=============================================="
echo ""

# Pede confirma√ß√£o antes de continuar
read -p "Deseja continuar e criar o backup? (s/n) " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Ss]$ ]]; then
    echo "Backup cancelado pelo usu√°rio."
    exit 1
fi

# Cria o backup no formato tar.gz (melhor balance entre compress√£o e compatibilidade)
echo "Criando backup: $BACKUP_FILE"
tar -czf "$BACKUP_FILE" "${DIRETORIOS[@]}"

# Verifica se o backup foi criado com sucesso
if [ $? -eq 0 ]; then
    echo "Backup criado com sucesso!"
    echo "Tamanho do arquivo: $(du -h "$BACKUP_FILE" | cut -f1)"
else
    echo "Erro ao criar o backup!"
    exit 1
fi
}


xtdc_install_libreoffice_appimage() {
    # Verificar se √© root
    if [[ $EUID -ne 0 ]]; then
        echo "Este script precisa ser executado como root" >&2
        return 1
    fi

    # Configura√ß√µes
    local LO_URL="https://appimages.libreitalia.org/LibreOffice-fresh.standard-x86_64.AppImage"
    local LO_FILENAME="LibreOffice-fresh.standard-x86_64.AppImage"
    local INSTALL_DIR="/xtdc25/AppImages"
    local DESKTOP_FILE="$HOME/.local/share/applications/libreoffice-appimage.desktop"
    local ICON_URL="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/LibreOffice_Main_Logo.png/240px-LibreOffice_Main_Logo.png"
    local ICON_PATH="/usr/share/icons/xtdc_icons/apps/libreoffice.png"

    # MIME types para configurar
    local MIME_TYPES=(
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        "application/vnd.openxmlformats-officedocument.presentationml.presentation"
        "application/msword"
        "application/vnd.ms-excel"
        "application/vnd.ms-powerpoint"
        "application/vnd.oasis.opendocument.text"
        "application/vnd.oasis.opendocument.spreadsheet"
        "application/vnd.oasis.opendocument.presentation"
    )

    # Criar diret√≥rio de instala√ß√£o
    mkdir -p "$INSTALL_DIR" || {
        echo "Erro ao criar diret√≥rio $INSTALL_DIR" >&2
        return 1
    }

    # Baixar AppImage
    echo "Baixando LibreOffice AppImage..."
    wget -q --show-progress -O "$INSTALL_DIR/$LO_FILENAME" "$LO_URL" || {
        echo "Erro ao baixar o arquivo" >&2
        return 1
    }

    # Tornar execut√°vel
    chmod +x "$INSTALL_DIR/$LO_FILENAME" || {
        echo "Erro ao tornar o AppImage execut√°vel" >&2
        return 1
    }

    # Criar diret√≥rio de √≠cones se n√£o existir
    mkdir -p "$(dirname "$ICON_PATH")"

    # Baixar √≠cone se n√£o existir
    if [[ ! -f "$ICON_PATH" ]]; then
        echo "Baixando √≠cone do LibreOffice..."
        wget -q -O "$ICON_PATH" "$ICON_URL" || {
            echo "Erro ao baixar o √≠cone" >&2
            # N√£o √© cr√≠tico, ent√£o continuamos
        }
    fi

    # Criar arquivo .desktop
    echo "Criando arquivo .desktop..."
    cat > "$DESKTOP_FILE" <<EOL
[Desktop Entry]
Type=Application
Name=LibreOffice
Comment=Su√≠te Office Completa
Exec=$INSTALL_DIR/$LO_FILENAME
Icon=$ICON_PATH
Terminal=false
Categories=Office;
MimeType=$(IFS=';'; echo "${MIME_TYPES[*]}")
StartupNotify=true
EOL

    # Atualizar banco de dados desktop
    update-desktop-database || {
        echo "Erro ao atualizar o banco de dados de desktop" >&2
        return 1
    }

    # Configurar como aplicativo padr√£o
    echo "Configurando como aplicativo padr√£o..."
    for mime in "${MIME_TYPES[@]}"; do
        xdg-mime default libreoffice-appimage.desktop "$mime" || {
            echo "Erro ao configurar padr√£o para $mime" >&2
        }
    done

    echo "Instala√ß√£o conclu√≠da com sucesso!"
    echo "LibreOffice AppImage instalado em: $INSTALL_DIR/$LO_FILENAME"
}






xtdc_install_gimp_appimage() {
    # Verificar se √© root
    if [[ $EUID -ne 0 ]]; then
        echo "Este script precisa ser executado como root" >&2
        return 1
    fi

    # Configura√ß√µes
    local GIMP_URL="https://edgeuno-bog2.mm.fcix.net/gimp/gimp/v3.0/linux/GIMP-3.0.4-x86_64.AppImage"
    local GIMP_FILENAME="GIMP-3.0.4-x86_64.AppImage"
    local INSTALL_DIR="/xtdc25/AppImages"
    local DESKTOP_FILE="$HOME/.local/share/applications/gimp-appimage.desktop"
    local ICON_URL="https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/The_GIMP_icon_-_gnome.svg/240px-The_GIMP_icon_-_gnome.svg.png"
    local ICON_PATH="/usr/share/icons/xtdc_icons/apps/gimp.png"

    # MIME types para configurar
    local MIME_TYPES=(
        "image/bmp"
        "image/gif"
        "image/jpeg"
        "image/jpg"
        "image/png"
        "image/svg+xml"
        "image/tiff"
        "image/webp"
        "image/x-eps"
        "image/x-psd"
        "image/x-tga"
        "application/postscript"
    )

    # Criar diret√≥rio de instala√ß√£o
    mkdir -p "$INSTALL_DIR" || {
        echo "Erro ao criar diret√≥rio $INSTALL_DIR" >&2
        return 1
    }

    # Baixar AppImage
    echo "Baixando GIMP AppImage..."
    wget -q --show-progress -O "$INSTALL_DIR/$GIMP_FILENAME" "$GIMP_URL" || {
        echo "Erro ao baixar o arquivo" >&2
        return 1
    }

    # Tornar execut√°vel
    chmod +x "$INSTALL_DIR/$GIMP_FILENAME" || {
        echo "Erro ao tornar o AppImage execut√°vel" >&2
        return 1
    }

    # Criar diret√≥rio de √≠cones se n√£o existir
    mkdir -p "$(dirname "$ICON_PATH")"

    # Baixar √≠cone se n√£o existir
    if [[ ! -f "$ICON_PATH" ]]; then
        echo "Baixando √≠cone do GIMP..."
        wget -q -O "$ICON_PATH" "$ICON_URL" || {
            echo "Erro ao baixar o √≠cone" >&2
            # N√£o √© cr√≠tico, ent√£o continuamos
        }
    fi

    # Criar arquivo .desktop
    echo "Criando arquivo .desktop..."
    cat > "$DESKTOP_FILE" <<EOL
[Desktop Entry]
Type=Application
Name=GIMP
Comment=Editor de imagens avan√ßado
Exec=$INSTALL_DIR/$GIMP_FILENAME
Icon=$ICON_PATH
Terminal=false
Categories=Graphics;
MimeType=$(IFS=';'; echo "${MIME_TYPES[*]}")
StartupNotify=true
Keywords=imagem;editor;GIMP;graphic;design;illustration;painting;
EOL

    # Atualizar banco de dados desktop
    update-desktop-database || {
        echo "Erro ao atualizar o banco de dados de desktop" >&2
        return 1
    }

    # Configurar como aplicativo padr√£o
    echo "Configurando como aplicativo padr√£o..."
    for mime in "${MIME_TYPES[@]}"; do
        xdg-mime default gimp-appimage.desktop "$mime" || {
            echo "Erro ao configurar padr√£o para $mime" >&2
        }
    done

    echo "Instala√ß√£o conclu√≠da com sucesso!"
    echo "GIMP AppImage instalado em: $INSTALL_DIR/$GIMP_FILENAME"
    echo "Execute com: $INSTALL_DIR/$GIMP_FILENAME"
}










# Chama a fun√ß√£o principal se o script for executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    "$@"
fi

#!/bin/bash

#######################
#    ^...^  `^...^´   #
#   / o,o \ / O,O \   #
#   |):::(| |):::(|   #
# ====" "=====" "==== #
#         TdC         #
#      1998-2025      #
#######################
#
# Toca das Corujas
# Códigos Binários,
# Funções de Onda e
# Teoria do Orbital Molecular Inc.
# Unidade Barão Geraldo CX
#
# 2025_07_11_12_00_00
#
# =================================================⚡
# CONFIGURAÇÃO DE CORES
# =================================================⚡
COLOR_HEADER="\e[104m"
COLOR_SUCCESS="\e[1;32m"
COLOR_WARNING="\e[0;35m"
COLOR_ERROR="\e[1;31m"
COLOR_INFO="\e[1;36m"
COLOR_RESET="\033[0m"


# =================================================⚡
# FUNÇÕES DE GERENCIAMENTO E AJUDA
# =================================================⚡

# =================================================⚡
# Função: xtdc_ajuda
# Descrição: Exibe ajuda para todas as funções disponíveis no script
# Uso: xtdc_ajuda [arquivo]
# =================================================⚡
xtdc_ajuda(){
    local file="${1:-${BASH_SOURCE[0]}}"
    echo -e "\n\033[1;36mHELP DAS FUNÇÕES DISPONÍVEIS\033[0m\n"

    # Processa cada bloco de documentação
    while IFS= read -r line; do
        # Encontra o cabeçalho de documentação
        if [[ "$line" =~ ^#\ Função:\ ([[:alnum:]_]+)$ ]]; then
            func_name="${BASH_REMATCH[1]}"
            
            # Extrai a descrição
            desc=$(sed -n "/^# Função: $func_name$/,/^$func_name()/p" "$file" | 
                   grep -m1 "^# Descrição:" | sed 's/^# Descrição: //')
            
            # Extrai o uso
            uso=$(sed -n "/^# Função: $func_name$/,/^$func_name()/p" "$file" | 
                  grep -m1 "^# Uso:" | sed 's/^# Uso: //')

            # Exibe corretamente formatado
            echo -e "\033[1;34m${func_name}\033[0m"
            [[ -n "$desc" ]] && echo -e "  \033[1;35mDescrição:\033[0m $desc"
            [[ -n "$uso" ]] && echo -e "  \033[1;32mUso:\033[0m \033[0;33m$uso\033[0m"
            echo ""
        fi
    done < "$file"
}

# =================================================⚡
# Função: xtdc_listar_funcoes
# Descrição: Lista todas as funções disponíveis no script
# Uso: xtdc_listar_funcoes
# =================================================⚡
xtdc_listar_funcoes() {
    echo -e "\n${COLOR_HEADER}FUNÇÕES DISPONÍVEIS:${COLOR_RESET}"
    echo "========================================"
    declare -F | grep 'xtdc_' | awk '{print $3}' | sort | column
    echo "========================================"
}

# =================================================⚡
# FUNÇÕES DE MULTIMÍDIA
# =================================================⚡

# =================================================⚡
# Função: xtdc_printa
# Descrição: Captura uma região da tela, salva em um arquivo com data/hora e copia para o clipboard
# Uso: xtdc_printa
# =================================================⚡
xtdc_printa(){
    local agora=$(date +%Y_%m_%d_%H_%M_%S)
    local destino="/mnt/UM/IMAGENS/PRINTS"
    mkdir -p "$destino"
    local temp_file=$(mktemp "/tmp/xfce_screenshot_XXXXXX.png")

    if xfce4-screenshooter -rc -s "$temp_file" 2>/dev/null; then
        if [[ -s "$temp_file" ]]; then
            local novo_arquivo="${destino}/captura_de_tela_${agora}.png"
            mv "$temp_file" "$novo_arquivo" && {
                zenity --notification --timeout=1 --text="✅ Captura salva em:\n${novo_arquivo}"
            }
        else
            rm -f "$temp_file"
            zenity --error --title="Captura Cancelada" --text="❌ Nenhuma região foi selecionada." --timeout=1
        fi
    else
        rm -f "$temp_file"
        zenity --error --title="Erro na Captura" --text="❌ A captura foi cancelada ou ocorreu um erro." --timeout=1
    fi
}

# =================================================⚡
# Função: xtdc_maisvol
# Descrição: Aumenta/reduz o volume de um arquivo de mídia usando ffmpeg
# Uso: xtdc_maisvol arquivo.mp3 3 (aumenta 3dB)
# =================================================⚡
xtdc_maisvol(){
    ffmpeg -i "$1" -af volume="$2" -vcodec copy "alto_$1"
}

# =================================================⚡
# Função: xtdc_maisveloc
# Descrição: Acelera um vídeo em 1.6x (ajustável via setpts e atempo)
# Uso: xtdc_maisveloc arquivo.mp4
# =================================================⚡
xtdc_maisveloc(){
    ffmpeg -i "$1" -filter_complex "[0:v]setpts=0.625*PTS[v];[0:a]atempo=1.6[a]" \
        -map "[v]" -map "[a]" "rapido_$1"
}

# =================================================⚡
# Função: xtdc_norma
# Descrição: Normaliza o volume de um arquivo de mídia e converte para AAC
# Uso: xtdc_norma arquivo.mp4
# =================================================⚡
xtdc_norma(){
    local nome=${1::-4}
    ffmpeg-normalize "$1" -c:a aac -b:a 192k -o "${nome}alto.mp4"
    rm -rf "$1"
}

# =================================================⚡
# Função: xtdc_baixa5
# Descrição: Reduz o volume de um arquivo em 5dB
# Uso: xtdc_baixa5 arquivo.mp3
# =================================================⚡
xtdc_baixa5(){
    local nome_base="${1%.*}"
    local extensao="${1##*.}"
    ffmpeg -i "$1" -af "volume=-5dB" -c:v copy -c:a aac -b:a 192k "${nome_base}_5db.${extensao}"
}

# =================================================⚡
# Função: extrair_legendas
# Descrição: Extrai legendas de todos os arquivos MKV no diretório atual
# Uso: extrair_legendas
# =================================================⚡
xtdc_extrair_legendas() {
    for arquivo in *.mkv; do
        [ -e "$arquivo" ] || continue
        base="${arquivo%.mkv}"
        echo "Extraindo legenda de: $arquivo"
        mkvextract tracks "$arquivo" 2:"$base.srt"
    done
}

# =================================================⚡
# Função: extrair_legenda
# Descrição: Extrai legenda de um arquivo MKV específico
# Uso: extrair_legenda arquivo.mkv
# =================================================⚡
xtdc_extrair_legenda() {
    arquivo="$1"
    [ -f "$arquivo" ] || { echo "Arquivo não encontrado: $arquivo"; return 1; }
    base="${arquivo%.mkv}"
    echo "Extraindo legenda de: $arquivo"
    mkvextract tracks "$arquivo" 2:"$base.srt"
}

# =================================================⚡
# FUNÇÕES DE DOWNLOAD E CONVERSÃO
# =================================================⚡

# =================================================⚡
# Função: xtdc_ytcut
# Descrição: Corta um vídeo do YouTube entre dois tempos (sem re-encode)
# Uso: xtdc_ytcut "URL" 00:01:00 00:02:00 saida
# =================================================⚡
xtdc_ytcut(){
    ffmpeg -ss "$2" -to "$3" -i "$(yt-dlp -f best --get-url "$1")" \
        -c:v copy -c:a copy "$4.mp4"
}

# =================================================⚡
# Função: xtdc_baixa_playlistYT
# Descrição: Download de playlists do YouTube em resolução 480p (MKV)
# Uso: xtdc_baixa_playlistYT
# =================================================⚡
xtdc_baixa_playlistYT(){
    local PLAYLIST_URL=$(zenity --entry --title "Download de Playlist" --text "Cole a URL:")
    [[ -z "$PLAYLIST_URL" ]] && return

    local SAVE_DIR=$(zenity --file-selection --title "Pasta destino" --directory)
    [[ -z "$SAVE_DIR" ]] && return

    mkdir -p "$SAVE_DIR"

    echo "Iniciando download da playlist..."
    yt-dlp --yes-playlist -f "bestvideo[height<=480]+bestaudio" \
        --merge-output-format mkv -o "$SAVE_DIR/%(title)s.%(ext)s" "$PLAYLIST_URL"

    zenity --info --text="✅ Downloads concluídos em:\n$SAVE_DIR"
}

# =================================================⚡
# Função: xtdc_baixa_playlistYT_audio
# Descrição: Download direto de áudios MP3 de playlists do YouTube (sem conversão)
# Uso: xtdc_baixa_playlistYT_audio
# =================================================⚡
xtdc_baixa_playlistYT_audio(){
    local PLAYLIST_URL=$(zenity --entry --title "Download de Playlist (Áudio)" --text "Cole a URL da playlist:")
    [[ -z "$PLAYLIST_URL" ]] && return

    local SAVE_DIR=$(zenity --file-selection --title "Pasta destino" --directory)
    [[ -z "$SAVE_DIR" ]] && return

    mkdir -p "$SAVE_DIR"

    echo "Iniciando download dos áudios em MP3..."
    yt-dlp --yes-playlist \
        -f "bestaudio[ext=m4a]/bestaudio" \
        --extract-audio \
        --audio-format mp3 \
        --audio-quality 0 \
        --embed-thumbnail \
        --add-metadata \
        -o "$SAVE_DIR/%(title)s.%(ext)s" \
        "$PLAYLIST_URL"

    zenity --info --text="✅ Downloads de áudio concluídos em:\n$SAVE_DIR"
}

# =================================================⚡
# Função: xtdc_videoYT_baixa
# Descrição: Download de vídeos do YouTube com seleção de qualidade
# Uso: xtdc_videoYT_baixa
# =================================================⚡
xtdc_videoYT_baixa(){
    local VIDEO_URL=$(zenity --entry --title "Download de Vídeo" --text "Cole a URL:" --width=400)
    [[ -z "$VIDEO_URL" ]] && return 1

    local SAVE_DIR=$(zenity --file-selection --title "Selecione a pasta de destino" --directory)
    [[ -z "$SAVE_DIR" ]] && return 1

    local QUALIDADE=$(zenity --list --title "Selecione a qualidade" \
        --text "Escolha o formato:" \
        --column "Opção" --column "Descrição" \
        "480p" "Qualidade padrão (480p + áudio)" \
        "720p" "HD (720p + áudio)" \
        "1080p" "Full HD (1080p + áudio)" \
        "audio" "Somente áudio" \
        --height=250 --width=400)

    case "$QUALIDADE" in
        "480p") local FORMATO="bestvideo[height<=480]+bestaudio" ;;
        "720p") local FORMATO="bestvideo[height<=720]+bestaudio" ;;
        "1080p") local FORMATO="bestvideo[height<=1080]+bestaudio" ;;
        "audio") local FORMATO="bestaudio" ;;
        *) local FORMATO="bestvideo[height<=480]+bestaudio" ;;
    esac

    mkdir -p "$SAVE_DIR"
    yt-dlp -f "$FORMATO" --merge-output-format mkv -o "$SAVE_DIR/%(title)s.%(ext)s" "$VIDEO_URL"

    zenity --info --title "Download Concluído" --text "✅ Download finalizado em:\n$SAVE_DIR" --width=300
}

# =================================================⚡
# FUNÇÕES UTILITÁRIAS
# =================================================⚡

# =================================================⚡
# Função: xtdc_testaurl
# Descrição: Verifica se uma URL está acessível
# Uso: xtdc_testaurl "https://exemplo.com"
# =================================================⚡
xtdc_testaurl(){
    if curl --head --silent --fail "$1" > /dev/null 2>&1; then
        zenity --info --text="✅ Esta URL existe."
    else
        zenity --error --text="❌ Esta URL não existe."
    fi
}

# =================================================⚡
# Função: xtdc_ajusta_volume
# Descrição: Interface gráfica para ajustar o volume de um arquivo de mídia
# Uso: xtdc_ajusta_volume
# =================================================⚡
xtdc_ajusta_volume(){
    local arquivo=$(zenity --file-selection --title="Selecione o arquivo" \
        --file-filter="*.mp4 *.mkv *.avi *.mov *.mp3 *.flac *.wav")
    [[ -z "$arquivo" ]] && return

    local db=$(zenity --scale --title="Volume" \
        --text="Ajuste de dB" --min-value=-20 --max-value=20 --value=0 --step=1)
    [[ -z "$db" ]] && return

    local nome_base="${arquivo%.*}"
    local extensao="${arquivo##*.}"
    local arquivo_saida="${nome_base}_${db}dB.${extensao}"
    local log_file=$(mktemp)

    (
        ffmpeg -i "$arquivo" -af "volume=${db}dB" -c:v copy -c:a aac -b:a 192k "$arquivo_saida" 2>"$log_file"
        echo $? > /tmp/ffmpeg_exit_code
    ) | zenity --progress --title="Processando..." --text="Ajustando volume..." --pulsate --auto-close

    local exit_code=$(cat /tmp/ffmpeg_exit_code)
    rm /tmp/ffmpeg_exit_code

    if [[ "$exit_code" -eq 0 && -f "$arquivo_saida" ]]; then
        zenity --info --text="✅ Volume ajustado: $arquivo_saida"
        rm "$log_file"
    else
        local erro=$(grep -i "error\|failed" "$log_file" | head -n 5)
        zenity --error --text="❌ Falha ao processar:\n${erro}"
    fi
}

# =================================================⚡
# Função: xtdc_baixar_targz_github
# Descrição: Baixa um arquivo tar.gz do GitHub, descompacta na pasta atual e remove o arquivo original
# Uso: xtdc_baixar_targz_github "URL_DO_ARQUIVO.tar.gz"
# =================================================⚡
xtdc_baixar_targz_github() {
    if [[ -z "$1" ]]; then
        echo -e "\033[1;31mErro: URL do arquivo não informada.\033[0m"
        echo "Uso: xtdc_baixar_targz_github \"URL_DO_ARQUIVO.tar.gz\""
        return 1
    fi

    local url="$1"
    local nome_arquivo=$(basename "$url")
    local temp_dir=$(mktemp -d)

    echo -e "\033[1;34m[1/3] Baixando arquivo...\033[0m"
    if ! curl -fsSL "$url" -o "$nome_arquivo"; then
        echo -e "\033[1;31mErro: Falha ao baixar o arquivo.\033[0m"
        rm -rf "$temp_dir"
        return 1
    fi

    echo -e "\033[1;34m[2/3] Descompactando arquivo...\033[0m"
    if ! tar -xzf "$nome_arquivo" -C .; then
        echo -e "\033[1;31mErro: Falha ao descompactar o arquivo.\033[0m"
        rm -f "$nome_arquivo"
        rm -rf "$temp_dir"
        return 1
    fi

    echo -e "\033[1;34m[3/3] Limpando arquivo temporário...\033[0m"
    rm -f "$nome_arquivo"

    echo -e "\033[1;32m✔ Concluído! Arquivo descompactado na pasta atual.\033[0m"
    return 0
}

# =================================================⚡
# Função: xtdc_baixar_descompactar_zip_senha
# Descrição: Baixa um arquivo ZIP com senha do GitHub, solicita a senha apenas na descompactação
# Uso: xtdc_baixar_descompactar_zip_senha "URL_DO_ARQUIVO.zip"
# =================================================⚡
xtdc_baixar_descompactar_zip_senha() {
    if [[ -z "$1" ]]; then
        echo -e "\033[1;31mErro: URL do arquivo não informada.\033[0m"
        echo "Uso: xtdc_baixar_descompactar_zip_senha \"URL_DO_ARQUIVO.zip\""
        return 1
    fi

    local url="$1"
    local nome_arquivo=$(basename "$url")

    echo -e "\033[1;34m[1/3] Baixando arquivo ZIP...\033[0m"
    if ! curl -fsSL "$url" -o "$nome_arquivo"; then
        echo -e "\033[1;31mErro: Falha ao baixar o arquivo.\033[0m"
        return 1
    fi

    echo -e "\033[1;34m[2/3] Solicitando senha para descompactação...\033[0m"
    read -s -p "Digite a senha do arquivo ZIP: " senha
    echo ""  # Pula linha após a senha

    echo -e "\033[1;34m[3/3] Descompactando arquivo...\033[0m"
    if ! unzip -P "$senha" "$nome_arquivo"; then
        echo -e "\033[1;31mErro: Falha ao descompactar o arquivo (senha incorreta?)\033[0m"
        rm -f "$nome_arquivo"
        return 1
    fi

    echo -e "\033[1;32m✔ Concluído! Arquivo descompactado na pasta atual.\033[0m"
    
    # Pergunta se deseja remover o arquivo ZIP original
    read -p "Deseja remover o arquivo ZIP original? [s/N] " resposta
    if [[ "$resposta" =~ ^[Ss]$ ]]; then
        rm -f "$nome_arquivo"
        echo "Arquivo original removido."
    fi
    
    return 0
}

# =================================================⚡
# Função: xtdc_configurar_diretorios
# Descrição: Configura diretórios padrão do usuário com interface interativa
# Uso: xtdc_configurar_diretorios
# =================================================⚡
xtdc_configurar_diretorios() {
    # Resolve o caminho real mesmo quando há atalhos
    resolve_caminho_real() {
        local caminho="$1"
        if [ -L "$caminho" ]; then
            readlink -f "$caminho"
        else
            echo "$caminho"
        fi
    }

    # Diretórios padrão do usuário
    declare -A diretorios=(
        ["Downloads"]="$(resolve_caminho_real "$HOME/Downloads")"
        ["Documentos"]="$(resolve_caminho_real "$HOME/Documents")"
        ["Imagens"]="$(resolve_caminho_real "$HOME/Pictures")"
        ["Música"]="$(resolve_caminho_real "$HOME/Music")"
        ["Vídeos"]="$(resolve_caminho_real "$HOME/Videos")"
    )

    while true; do
        clear
        echo -e "\033[1;36m=== CONFIGURAR DIRETÓRIOS ===\033[0m"
        echo -e "\033[1;37mDiretórios atuais:\033[0m"
        
        # Lista os diretórios com numeração
        local i=1
        declare -A opcoes
        for nome in "${!diretorios[@]}"; do
            echo -e "  \033[1;33m$i\033[0m) $nome: \033[1;32m${diretorios[$nome]}\033[0m"
            opcoes["$i"]="$nome"
            ((i++))
        done

        echo -e "\n  \033[1;33m0\033[0m) Concluir"
        echo -ne "\nSelecione uma opção (0-$((i-1))): "

        read -r opcao

        # Verifica se quer sair
        if [[ "$opcao" == "0" ]]; then
            break
        fi

        # Verifica se a opção é válida
        if [[ -z "${opcoes[$opcao]}" ]]; then
            echo -e "\033[1;31mOpção inválida!\033[0m"
            sleep 1
            continue
        fi

        local dir_selecionado="${opcoes[$opcao]}"
        local caminho_atual="${diretorios[$dir_selecionado]}"

        echo -e "\n\033[1;37mDiretório atual de $dir_selecionado:\033[0m \033[1;32m$caminho_atual\033[0m"
        echo -ne "Digite o novo caminho (ou Enter para manter): "
        read -r novo_caminho

        if [[ -n "$novo_caminho" ]]; then
            # Verifica se o diretório existe
            if [[ ! -d "$novo_caminho" ]]; then
                echo -ne "Diretório não existe. Criar? [s/N] "
                read -r criar
                if [[ "$criar" =~ ^[Ss]$ ]]; then
                    mkdir -p "$novo_caminho" || {
                        echo -e "\033[1;31mFalha ao criar diretório!\033[0m"
                        sleep 1
                        continue
                    }
                else
                    continue
                fi
            fi

            # Atualiza o caminho
            diretorios["$dir_selecionado"]="$novo_caminho"
            
            # Pergunta se deseja mover os arquivos
            echo -ne "Deseja mover os arquivos do diretório antigo? [s/N] "
            read -r mover
            if [[ "$mover" =~ ^[Ss]$ ]]; then
                mv "$caminho_atual"/* "$novo_caminho/" 2>/dev/null
                echo -e "\033[1;32mArquivos movidos com sucesso!\033[0m"
            fi
            
            echo -e "\033[1;32mDiretório atualizado!\033[0m"
            sleep 1
        fi
    done

    # Mostra resumo final
    clear
    echo -e "\033[1;36m=== CONFIGURAÇÃO CONCLUÍDA ===\033[0m"
    echo -e "\033[1;37mDiretórios configurados:\033[0m"
    for nome in "${!diretorios[@]}"; do
        echo -e "  \033[1;33m$nome\033[0m: \033[1;32m${diretorios[$nome]}\033[0m"
    done
    echo
}

# =================================================⚡
# Função: check_modified_files
# Descrição: Verifica arquivos modificados comparando com /etc/skel ou backup original
# Uso: check_modified_files [diretório]
# =================================================⚡
check_modified_files() {
    local dir="$1"
    find "$dir" -type f -printf "%T@ %p\n" | sort -n | while read -r line; do
        filepath=$(echo "$line" | awk '{print $2}')
        # Ignorar arquivos temporários, cache, etc.
        if [[ $filepath =~ .*cache.*|.*tmp.*|.*\.log$ ]]; then
            continue
        fi
        # Compara com /etc/skel (se existir)
        if [ -d "$SKEL_DIR" ]; then
            skel_file="${SKEL_DIR}${filepath#$USER_HOME}"
            if [ -e "$skel_file" ]; then
                if ! cmp -s "$filepath" "$skel_file"; then
                    echo "$filepath" >> "$LOG_FILE"
                fi
            else
                echo "$filepath (novo)" >> "$LOG_FILE"
            fi
        else
            # Se não houver /etc/skel, lista todos exceto os padrões
            echo "$filepath" >> "$LOG_FILE"
        fi
    done
}

# =================================================▼
# Função: xtdc_update
# Descrição: Auto-atualiza o script a partir do GitHub
# Uso: xtdc_update
# =================================================▲
xtdc_update() {
    local github_url="https://raw.githubusercontent.com/Pinhalito/xtdc25/refs/heads/main/xtdc_mini"
    local temp_file=$(mktemp /tmp/xtdc_update.XXXXXX)
    
    echo -e "${COLOR_INFO}🔍 Verificando atualizações...${COLOR_RESET}"
    
    if ! wget -q "$github_url" -O "$temp_file"; then
        echo -e "${COLOR_ERROR}❌ Falha ao baixar a nova versão${COLOR_RESET}"
        rm -f "$temp_file"
        return 1
    fi
    
    if ! cmp -s "$0" "$temp_file"; then
        echo -e "${COLOR_INFO}🔄 Nova versão encontrada! Atualizando...${COLOR_RESET}"
        if sudo cp "$temp_file" "$0" && sudo chmod +x "$0"; then
            echo -e "${COLOR_SUCCESS}✅ Atualização concluída com sucesso!${COLOR_RESET}"
            echo -e "${COLOR_INFO}ℹ️ Reinicie o script para aplicar as mudanças.${COLOR_RESET}"
        else
            echo -e "${COLOR_ERROR}❌ Falha ao instalar a nova versão (permissões?)${COLOR_RESET}"
        fi
    else
        echo -e "${COLOR_SUCCESS}✅ Você já tem a versão mais recente!${COLOR_RESET}"
    fi
    
    rm -f "$temp_file"
}




# Função para embaralhar
embaralha() {
    echo -n "Digite a senha para embaralhar: "
    read -s senha
    echo
    
    # Gera o texto embaralhado
    texto_embaralhado=$(openssl enc -aes-256-cbc -a -A -salt -pass pass:"$senha" <<< "$1" 2>/dev/null)
    
    # Copia para o ClipIt corretamente
    echo -n "$texto_embaralhado" | xclip -selection clipboard
    
    # Verifica se foi copiado
    if [ "$(xclip -o -selection clipboard)" = "$texto_embaralhado" ]; then
        echo "✅ String embaralhada copiada para o clipboard!"
    else
        echo "❌ Falha ao copiar para o clipboard"
        echo "Texto embaralhado: $texto_embaralhado"
    fi
}

# Função para desembaralhar
desembaralha() {
    echo -n "Digite a senha para desembaralhar: "
    read -s senha
    echo
    
    openssl enc -aes-256-cbc -a -d -A -salt -pass pass:"$senha" <<< "$1" 2>/dev/null || echo "❌ Senha incorreta!"
}

senha_de_sempre() {
	desembaralha U2FsdGVkX19QKHP8C3kiSjD19OJAZHKaE/D0PPzyg3uHU2R1dv0ad27Kvtp2T5OYSPWq5+b7R5qNQYaaR2/I0Yip+NT4hTbO/FoMOEPRV4uEo1B6aeQxERclHK8mBg9o4XyqTXPRbj0uyy0e94vs1A==
}



# Chama a função principal se o script for executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    "$@"
fi
